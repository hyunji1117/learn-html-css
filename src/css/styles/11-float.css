@import "/src/common/theme.css";

body {
  margin: 100px;
}

/* CSS의 display 속성으로 특정 영역 보이지 않도록 설정 */
/* .mon-friend-son{
  di   height: 212px;splay: none;
} */

/* float 사용하기 */
.card {
  background: var(--pastel-pink);
  border: 1px solid green;

  .thumbnail {
    background: var(--pastel-yellow);
    /* float으로 인해 부모 요소인 thumbnail이 인식하지 못하는 높이를 포함하도록 BFC를 생성 */
    /* overflow: hidden; */
    /* width: 100%; */
    /* float: left; */
    display: flow-root;
    border: 1px solid red;

    img {
      /* position: relative;
      right: -50px;
      top: -50px; */
      float: left;
      width: 100px;
      vertical-align: middle;
      /* vertical-align: top; 이미지 아래쪽 여백을 없애기 위한 트릭 */
      /* display: block; 이미지 아래쪽 여백을 없애기 위한 트릭 */
    }
  }

  .subject {
    background: var(--pastel-blue);
  }

  .content {
    /* float 효과를 해제하기 위해 clear 속성을 사용할 수 있다. */
    /* clear속성은 반드시 block 성향을 가지는 요소에만 지정할 수 있다. */
    clear: both;
    background: var(--pastel-orange);
  }

}

/* 🤨 inline 속성에는 line-height가 있다.
이 안에 text를 작성하면 위, 아래 갭(reading area의 half reading이라 함.)
눈에 보이지 않는 3줄이 있다. top,bottom,baseline.
text는 baseline에 맞춰진다. 
글자의 아래쪽 부분(일명decender)가 있어서 이미지 아래 작은 스페이스가 생긴다.

이것 때문에 img에 display: block를 지정하면 이 여백을 없애는 트릭이 된다. 
다만, display: block;을 사용하면 text는 baise라인에 배치되지 않고 bottom라인에 배치된다. 

그래서 이 방법 말고, 
verical-align: top; 지정하면 여백이 사라지게 할 수 있다. 
여기서 middle line을 맞추려고 시도하면서 decender가 없어진다. 

누가 정답이 아니다. 

여백을 없애기 위한 트릭인 뿐이다.
다만 어느 속성이던 side effect를 꼭 생각해야 함.
🤨 나중에 reset을 꼭 열어서 확인해봐라.

inline-block, inline에서만 verical-align을 사용할 수 있다. 
자식 요소에게 직접 줘도 되고 부모에게 줘서 상속처리할 수도 있다. 

🤨 inline-box를 배치하는 매커니즘 (링크 공유해주시겠다.)
글자 아래 간견 없애기.

float 때문에 img 높이를 잃어버려기 때문에 부모에게 img 높이는 얼마인지 지정하면 높이가 없어지는 문제를 해결할 수 있다.
*/


/* -------------------------------------------- */

/* 높이를 지정하는 방법이 과연 좋을까?
js로 처리하고, 이미지 가로, 세로 크기 확인 후 height에 동적으로 해결 시킨다. 
반응형인 경우에, 어떤 모바일 환경에서 이미지 사이즈가 디바이스 별로 작고 크게 부모의 썸네일 높이가 달라지는데, 이 높이를 일일이 가져와야 하고, 또는 직접 일일이 지정할 수 있는데 js로 높이만 불러올 수 있어서. 

지금 높이를 지정하는게 효율적이지 않다! */

/* 유지보수 하다, 10px로 부모 높이를 141px 지정했다. 
사진 크기를 바꿔달라고 하면, 
float는 다음 영역에 영향을 준다. 그래서 height는 좋은 전략이 아니라.

그렇다면 content에 clear:both;를 주면 float의 영향권을 벗어나는 것이다. 
float: left를 해제하고 싶으면 clear: left를 지정해도 된다. 

이제는 height를 걱정하지 않아도 된다. 

아까 높이를 줬을 때는 
노란 배경이 보이지 않는다. 
분홍색 카드의 높이는 늘어났지만 실질적으로 썸네일의 높이는 늘어나지 않는다. (thumbnail 개발자 도구 보면 0임을 볼 수 있다.)


이번에는 속성 하나를 더 추가 해보자. 
float 부모에다가 overflow: auto;를 주면 썸네일 자식요소에서 넘치는 분홍 요소를 포함해서 컨테이닐 블록을 만들어서 잃어버렸던 자식요소의 높이를 다시 찾아준다. 

공식처럼 overflow: hidden을 사용한다. 


🤨 치킨 BFC (Block Formatting Context) 방법론
float, clear, inline-block, table-cell, table-caption, overflow: hidden, display: table-cell, inline-flex, grid, flex 등이 BFC를 만든다.

내 컨테이닝 안에 어떤 블록이 있는지 보고 철리한다. 

position: absolute;, fixed  BFC를 만들지 않는다.
overflow는 BFC 효과를 만들어 낸다. 
아직까지는 현업에서 공식처럼 overflow: hidden을 많이 사용한다. 
이 트릭의 문제점은 

position: relative; 움직여서 배치했더니 img가 보이지 않는다. 
overflow:hidden 때문에 이런 현상이 생긴다. 
예: 폭탄세일 붙이는 이미지가 상자 밖에 배치된다. overflow:hidden을 쓰면 보이지 않는 문제가 생긴다. 

🤨 UI를 많이 만들어봐야 한다고 말하는 이유이다. 
썸네일의 높이를 지정해주기 위한 속성이, **잠재적인 위험성을 내포**하고 있어서 주의가 필요하다.

부산대 맞춤법 검사 개발하는 부장님, overflow heck 설명하면서 줌 비포
버그를 생성하는데 

블록으로 초기값을 일부러 지정했다. 
🤨 display: flow-root;로 지정하면 BFC를 만들게 된다. 
앞으로는 overflow:hidden 대신 display: flow-root;를 사용하자.

float:right가 있을 때 
clear:both를 주면 분홍색 content 영역이 보이면서 겹치지 않는다. 
clear는 블록의 성향으로 inline에는 적용되지 않는다. (문법오류가 달라진다.)

*/

/* 이런 방법도 있다.
width: 100%를 주고 float: left를 쓰니 높이가 지정 되었다.
화면에 떠있으려면 크기가 있어야 한다. width, height를 주지 않으면 content 높이만큼 쫙 달라붙어서 높이 지정이 된다.

개발자 도구에서 thumbnail를 찍으면 높이가 100px를 읽어 들인다. 
width는 
배경이 보이지 않는건, 불투명하기 때문? 

UI를 만드는 상황에 따라 동작 특성에 맞춰서 동작 원리를 알려주는 것이다. 

옛날에 이중 float가 있었다.
3단 가로 레이아웃, 마크업은 수직 a,b,c상자
레이아웃에는 b,c,a로 배치하고 싶다. 
b와 c를 묶어놓고 left로 두고 a는 right로 둔다. 
요즘에는 flex를 많이 쓰니까 float를 이렇게 쓰지 않는다. 
*/

/* 일반 흐름을 벗어 나는 개체이다. 
원래는 일반 flow에 따라 배치된다.
float를 쓰게 되면 모든 자식 요소가 뜨게 된다. 

떠있게 되면 주변 배치에 영향을 준다. 
normal flow 상 파랑 상자가 노랑 상자위에 뜬다. 
float는 독립적인 객체 임으로 아래 어떤 개체도 올 수 없다. 

오후에 float 예제를 만들어보겠다. 

&::after {
  display: block;
  content: "";
  
}





*/