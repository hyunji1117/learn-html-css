/* 25.02.19(수) */

/*
https://css3test.com/

강사님 과거의 놀이터 (같은 html, 다른 css)
https://csszengarden.com/pages/alldesigns/

CDD / TDD
CDD (Component-Driven Development) & TDD (Test-Driven Development)란?
- CDD(Component-Driven Development) → 컴포넌트 중심 개발
- TDD(Test-Driven Development) → 테스트 주도 개발
둘 다 개발 방식(패러다임)이며, 코드의 품질을 높이는 데 도움을 줌


-- 최승균 공유 --
동작 순서같은건 테스트 못해봤고 한 source 요소 안에 쓰인 예시가 많지 않더라구요 그래도 알아낸것만 적으면..

media 속성은 (max-width: 800px)처럼 조건만 가짐
sizes 속성은 (max-width: 800px) 33vw처럼 조건과 값을 가짐

media 속성은 srcset에 있는 조건들에 추가 조건의 느낌으로 사용, 어떤 이미지를 고를지 도와줌
sizes도 마찬가지지만, 값을 가지는 것처럼 크기도 지정해줌
*/


/* 25.02.20(목) */
/* https://velog.io/@eunbinn/accessibility-essentials-every-front-end-developer-should-know?utm_source=substack&utm_medium=email [번역] 모든 프런트엔드 개발자가 알아야 할 접근성 필수 사항  강사님 추천! 꼭 한번 읽어 볼 것. 
- 오늘은 selector 부터 시작한다. 공부자료(완독 필요) - https://frontendmasters.com/blog/three-approaches-to-the-ampersand-selector-in-css/
- sass 추후에 나갈 것이다. 참고자료(공식문서) - https://sass-lang.com/documentation

Q: 파비콘 ico와 svg의 차이? 

ico는 옛날 사용했던 방식. 24*24, 64*64 등 해상도 별로 여러개 준비해야 했다.
오늘은 svg는 해상도 적용하지 않아도 되어서 강사님이 사용해본 것.  

    - 파비콘 설정 시 두 가지 방식 모두 연결 필요!
    - icon을 사용하면 최신 브라우저에서 SVG와 같은 고품질 포맷을 사용
    - shortcut icon을 통해 구형 브라우저에서도 호환
    -->
    <!-- 1. 구형 브라우저 지원 (shortcut icon) : 아이콘 파일 (.ico 형식) -->
    <link
      rel="shortcut icon"
      href="/src/assets/favicon/likelion.ico"
      type="image/x-icon"
    />
    <!-- 2. 최신 브라우저 지원 (icon) : SVG 포맷의 파비콘을 사용
    -->
    <link rel="icon" href="/src/assets/favicon/likelion.svg" />

가독성이 좋은 글꼴이다. - 프리텐다드
https://noonnu.cc/font_page/694
https://github.com/orioncactus/pretendard

승균님 추천 자료 : 선택자 블로그
https://webdesign.tutsplus.com/ko/the-30-css-selectors-you-must-memorize--net-16048t

https://2024.stateofcss.com/en-US/technologies/selectors/ - 2024년까지 CSS 어떤 기술이 사용될지 예측한 사이트 얼마나 인기있게 사용했는지 최신 트랜드, 방향성을 알 수 있다.
어떤 회사에서 일하는지에 따라 기술스택이 달라질 수 있다. 

https://stateofjs.com/en-US/technologies/css/ - 2024년까지 Javascript 어떤 기술이 사용될지 예측한 사이트

https://sass-lang.com/ - sass 공식문서
수업 끝날 때 즘에 강사님과 시도해 본다. 
*/

/* 25.02.21(금) 
https://nthmaster.ru/ - nth-child, nth-of-type 등을 연습할 수 있는 사이트
https://flukeout.github.io/ - css 게임
https://css-tricks.com/almanac/selectors/ - css 선택자 종류
https://css-tricks.com/almanac/properties/ - css 속성 종류
https://css-tricks.com/almanac/ - css 종합



피그마, option 누르면 사이 간격을 확인할 수 있다. 
a 태그 부모에 font-size: 0; 상속 처리로 inline 공백 제거 😱

14:00 - 15:00
https://atomicdesign.bradfrost.com/chapter-2/
아토믹 디자인 방법론 많이 회자되고 있다. 
UI를 개발할 때 

피그마 시안을 열어보면 여러 시안이 있을 것이다. 
초창기는 무료인데, 데브 모드는 몇 개만 정해져 있다. 
야뭇쌤 디자인 이다. 

아톰이 원자 > 분자 > 조직체 > 템플릿 > 페이지 순으로 나누어진다. 
이는 컴퍼런트 관련 UI과 굉장히 유사하다. 

아원자 입자 : 
컬러는 

원자 : 
대표적으로 버튼 컴포넌트를 들 수 있다. 
하나를 만들어 놓는다. 이는 원자 컴포넌트가 된다. 

리엑트 상태, 나중에 배울 것. useState, useEffect, 컴포넌트를 만들어서 사용한다.
이 때 컴포넌트를 만들어서 사용한다.

분자 : 
작은 단위의 원자가 모인 것이다.

** 재활용할 수 있는 범위를 어디까지 볼 수 있느냐가 포인트 이다. 

** 원자, 분자, 조직체 레벨의 컴포넌트를 역할에 맞게 잘 활용하는 것이 중요하다.
웹퍼블의 한계는 페이지 베이로 만들어서, 재사용성이 떨어진다.

간단한 예제여도 용도에 맞게 컴포넌트를 쪼개서 필요할 때 갖다 쓰는 연습을 해야 한다.

레고처럼 어떻게 조립할 것인지 
페이지 베이스일 경우 가상요소는 괜찮은데 나중에 리엑트가면 사용하지 않기 때문에 한계를 느끼는 것이다. 

html/css는 설계가 중요하다. 
바라보는 관점이 바뀔 것이다. 
컴포넌트 구분하는 것. 

분자로 만든 것 (총 5개) > 조직체로 간다. 
my thought: 하나를 제대로 만들면 뒤에 가서 편해진다. 
왜 여기에도 넣을 수 있는데 저기에 넣어요? 
각자 역할에 맞게 넣기 때문이다. 



*/



/*
예습 체크 리스트
- 공부 방향 가이드 - 노션 mdn 내용 - https://wholesale-snipe-50a.notion.site/CSS-Selector-114c3e449f1d80d2a044cdc03717abfc)
- 초록 책 1장 읽기


*/

/* 과제 :  


*/

/* 복습 체크 리스트 
1. 01-member-service.css 파일을 참고하여 CSS 선택자를 이해하고 컴포넌트 별로 역할을 다시 뜯어 본다. 
2. 간단한 박스를 만들면서 변화하는 모습을 이해해야 한다. (주말 숙제) 

- css 게임 해볼 것. nth 등 개념을 눈에 익힐 것
https://flukeout.github.io/
*/

/* ----------------------- @import "src/ui/sty 피그마 파일 불러오기"; */

/* a 요소 이면서 가상요소 선택자 */
.item::before {
  content: ":";
  padding: 0 8px;
  margin: 0 16px;
}

/* a 요소보다 우선순위가 높은 것 */
.first::before {
  content: "";
}

/* 뭐를 만들어 보면서 배운 내용을 접목해 보자 
피그마 시안을 보고 회고팀에서 배운 내용을 정리 해보자고 UI를 줄 것이다.
자율적으로 

설계와 디자인을 반복해야 한다. 계란이 먼저인지 닭이 먼저인지*/

/* 두 번째부터 나머지 모두 선택이 된다. */
/* 구조 선택자를 이용할 때 공부하기 좋은 예제 (not 실제 사용) */
a:nth-child(n+2) {}

.member_link {
  display: flex;
  /* font-size: 0; */
  /* li는 블록레벨이어서 inline으로 바꿔주는 것이다.*/
}

a {
  text-decoration: none;
  margin: 0 8px;
}

a:link {
  color: inherit;
}

a:visited {
  color: inherit;
}

ul,
li {
  list-style: none;

}

li {
  display: inline-block;
}


span {
  /* padding: 0 16px; */
}